buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/groups/public' }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.1.1'
        classpath 'com.github.townsfolk:gradle-release:1.2'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.0.3'
    }
}

apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'release'
apply plugin: 'os-package-base'

defaultTasks  'clean', 'build'

sourceCompatibility = '1.7'
group = 'com.rackspace.prefs'
mainClassName = "com.rackspace.prefs.WebApp"

// our package name for the RPM
def package_name = 'cloudfeeds-preferences-svc'
// our app name used by the rpm stuff
def app_name = 'preferences-service'
// clean version number with no -SNAPSHOT
def version_clean = version.minus("-SNAPSHOT")
// version number with -SNAPSHOT
def version_snapshot = version_clean + '-SNAPSHOT'
// path where our jars will be put on the system via the rpm/deb
def prefix_path = '/usr/share/' + app_name
// path where our configs will be put on the system via the rpm/deb
def config_path = '/etc/' + app_name
// user for the service, created via the preinstall.sh script
def app_user = 'prefssvc'
// group for the service, created via the preinstall.sh script
def app_group = 'prefssvc'

repositories {
    mavenCentral()
}

ext.scala_version = '2.10.4'
ext.scalatra_version = '2.3.0'
ext.jetty_version = '9.2.3.v20140905'

dependencies {
    compile 'org.scala-lang:scala-compiler:' + scala_version
    compile 'org.scala-lang:scala-library:' + scala_version
    compile 'org.scalatra:scalatra_2.10:' + scalatra_version
    compile 'org.scalatra:scalatra-scalate_2.10:' + scalatra_version
    compile 'org.scalatra:scalatra-json_2.10:2.3.0'
    compile 'org.json4s:json4s-jackson_2.10:3.2.11'
    compile 'com.typesafe.slick:slick_2.10:2.1.0'
    compile 'com.h2database:h2:1.4.182'
    compile 'c3p0:c3p0:0.9.1.2'
    compile 'org.eclipse.jetty:jetty-webapp:' + jetty_version
    compile 'org.eclipse.jetty:jetty-servlet:' + jetty_version
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'joda-time:joda-time:2.6'
    testCompile 'org.scalatest:scalatest_2.10:2.1.7'
}


// task to create one uber executable jar
task uberjar(type: Jar) {
    from {
        sourceSets.main.output
    } {
        // For prod/staging deploy external file with db config must be provided
        exclude "c3p0-config.xml"
    }

    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'com.rackspace.prefs.WebApp'
    }
}

modifyPom {
    project {
        name          'Cloud Feeds Preferences Service'
        description   'A service that provides REST API access to set (and validate) / get a group of key/value property'
        url           'http://github.com/rackerlabs/cloudfeeds-preferences-svc'
        packaging     'jar'
        inceptionYear '2014'

        scm {
            url        'https://github.com/rackerlabs/cloudfeeds-preferences-svc'
            connection 'scm:git:ssh://git@github.com/rackerlabs/cloudfeeds-preferences-svc.git'
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = false
}

nexus {
    sign = false
    repositoryUrl = 'http://maven.research.rackspacecloud.com/content/repositories/releases/'
    snapshotRepositoryUrl = 'http://maven.research.rackspacecloud.com/content/repositories/snapshots/'
}

// defaults for rpm/deb packaging
ospackage {
    os = LINUX
    packageName = package_name
    version = version_clean
    release = 1
    packageGroup = 'Application/System'
    packageDescription = 'This is the cloudfeeds preferences service application'
    url = 'http://github.com/rackerlabs/cloudfeeds-preferences-svc'

    // pre and post scriptlets
    preInstall file('src/main/resources/preinstall.sh')
    postInstall file('src/main/resources/postinstall.sh')

    directory(config_path, 755)
    directory(prefix_path, 755)
    directory(prefix_path + '/lib', 755)
    directory(prefix_path + '/bin', 755)

    // pull our configs and wadl from src/main/resources
    from('src/main/resources') {
        into config_path
        exclude 'preferences-service.init' // exclude init script
        exclude '*.sh' // exclude pre/post scripts
        // set permissions
        user app_user
        group app_group
        fileMode 0644
        fileType CONFIG | NOREPLACE
    }

    into prefix_path

    // pull our init script
    from('src/main/resources') {
        into 'bin'
        include 'preferences-service.init'
        user app_user
        group app_group
    }

    // collect our jars
    from('build/libs') {
        into 'lib'
        user app_user
        group app_group
    }

    // check to see which jar got built for our symlink so the init script works
    def version_jar = app_name + '-' + version_clean + '.jar'
    def snapshot_jar = app_name + '-' + version_snapshot + '.jar'
    def built_jar
    if (file('build/libs/' + version_jar).exists()) {
        built_jar = version_jar
    } else {
        built_jar = snapshot_jar
    }
    // println built_jar

    // create a symlink to named <app_name>.jar to the versioned jar
    link(prefix_path + '/lib/' + app_name + '.jar', prefix_path + '/lib/' + built_jar)

}

// task to create RPM
task buildRpm(type: Rpm, dependsOn: 'uberjar') {
    // this task inherits defaults from the ospackage section

    // the init script uses daemonize, require it
    requires('daemonize')

    // symlink for the init script
    link('/etc/init.d/' + app_name, prefix_path + '/bin/preferences-service.init')
}

artifacts {
    archives(buildRpm) {
        name   app_name
        type   'rpm'
        builtBy buildRpm
    }
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
    tagPrefix = 'cloudfeeds-preferences-svc'
    git.requireBranch = 'CF-293_prefs_rpm_release'
}

// 'gradle release' will also upload release to Nexus
uploadArchives.dependsOn   uberjar
createReleaseTag.dependsOn uploadArchives

